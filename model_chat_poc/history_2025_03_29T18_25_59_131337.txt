conversation context:
User:
How do I use python's re.sub() function?
Assistant:
The `re.sub()` function in Python is used to replace occurrences of a pattern in a string. The basic syntax is as follows:

`re.sub(pattern, replacer, string)`

- `pattern`: This is the regular expression that you want to search for in the string.
- `replacer`: This is the replacement value when the pattern is found.
- `string`: This is the original string where you want to apply the replacement.

Here are a few examples:

1. Replacing all occurrences of 'a' with 'b':
```
import re
print(re.sub('a', 'b', "banana"))
# Outputs: "bbanana"
```

2. Replacing all occurrences of a word with another word:
```
import re
print(re.sub(r'\b\w+\b', 'X', "Hello world, I love programming X"))
# Outputs: "X X , I love programming X"
```

3. Removing leading or trailing whitespace from a string:
```python
import re
print(re.sub(r'^ +| +$', '', "   Hello World   "))
# Outputs: "  Hello World  "
```

These are just basic examples, but the `re.sub()` function is very powerful and can be used to perform a wide range of text processing operations.
User:
I have a string with multiple occurences of '-', ':' and '.' and want all of them to be replaced by '_'.
Assistant:
To replace all occurrences of '-', ':', and '.' with '_' using the `re.sub()` function, you can use the following code:

```python
import re
string = "hello-world:foo.bar;baz.qux"
new_string = re.sub(r'[.-]', '_', string)
print(new_string)  # Outputs: "hello_world_foo_bar_baz_qux"
```

In this example, `r'[.-]'` is a raw string literal that matches either '-' or '.'. The `[.]` part of the regular expression classifies the characters inside it as a set of allowed characters, in this case, both '-' and '.' are included.
